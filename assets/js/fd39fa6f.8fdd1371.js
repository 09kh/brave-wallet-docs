"use strict";(self.webpackChunkbrave_wallet_docs=self.webpackChunkbrave_wallet_docs||[]).push([[291],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(r),d=a,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||o;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1104:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},assets:function(){return u},toc:function(){return p},default:function(){return d}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],l={sidebar_position:4},c="Wallet detection",s={unversionedId:"ethereum/wallet-detection",id:"ethereum/wallet-detection",title:"Wallet detection",description:"Since Brave Wallet aims to be compatible with MetaMask's Ethereum provider API, we recommend that Dapps treat Brave Wallet like MetaMask.",source:"@site/docs/ethereum/wallet-detection.md",sourceDirName:"ethereum",slug:"/ethereum/wallet-detection",permalink:"/ethereum/wallet-detection",editUrl:"https://github.com/brave/brave-wallet-docs/edit/main/docs/ethereum/wallet-detection.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Custom chains",permalink:"/ethereum/custom-chains"},next:{title:"Local development environment",permalink:"/ethereum/use-cases/local-development-environment"}},u={},p=[{value:"Detecting Brave:",id:"detecting-brave",level:2}],m={toc:p};function d(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"wallet-detection"},"Wallet detection"),(0,o.kt)("p",null,"Since Brave Wallet aims to be compatible with MetaMask's Ethereum provider API, we recommend that Dapps treat Brave Wallet like MetaMask.\nDespite the API compatability, it is still recommendend and helpful for Brave Wallet users to see a a Brave Wallet button to connect to a Dapp."),(0,o.kt)("h2",{id:"detecting-brave"},"Detecting Brave:"),(0,o.kt)("p",null,"We set ",(0,o.kt)("inlineCode",{parentName:"p"},"window.ethereum.isMetaMask")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," for web compatability; however, one can use ",(0,o.kt)("inlineCode",{parentName:"p"},"web3_clientVersion")," to check for Brave Wallet."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const isBraveBrowser = (navigator.brave ?? false) && await navigator.brave.isBrave()\nconst isBraveWallet = await window.ethereum.request({\n    method: 'web3_clientVersion'\n  }).then((clientVersion) => {\n    return window.ethereum.isMetaMask && clientVersion.split('/')[0] !== 'MetaMask'\n  })\nconsole.log('Brave Browser: ', isBraveBrowser)\nconsole.log('Brave Wallet: ', isBraveWallet)\n")))}d.isMDXComponent=!0}}]);